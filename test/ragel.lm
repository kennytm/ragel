
namespace ragel

lex
	ignore /[\t\n ]+/
	ignore /'#' any* :> '\n'/

	literal '^', '|', '-', ',', ':', '!', '?', '.'
	literal '(', ')', '{', '}', '*', '&', '+'

	literal '--', ':>', ':>>', '<:', '->', '**'

	literal '|*', '*|', '=>' 

	literal '@', '>', '<', '%', '$'
	literal 'from', 'to', 'eof', 'lerr', 'err'
	literal 'when', 'inwhen', 'outwhen', '>?', '$?', '%?' 

	literal ':=', '=', ';', '..'

	literal '>~', '$~', '%~', '<~', '@~', '<>~' 
	literal '>*', '$*', '%*', '<*', '@*', '<>*' 
	literal '>/', '$/', '%/', '</', '@/', '<>/' 
	literal '>!', '$!', '%!', '<!', '@!', '<>!' 
	literal '>^', '$^', '%^', '<^', '@^', '<>^' 
	literal '<>'

	literal 'machine', 'action'

	token string /
		'"' ( [^"\\] | '\\' any )* '"' |
		"'" ( [^'\\] | '\\' any )* "'"
	/
	token union /
		'[' any* :> ']'
	/

	token word /[a-zA-Z_][a-zA-Z0-9_]*/
	token uint /[0-9]+/
end 

def join
	[join ',' expression]
|	[expression]

def expression
	[term expression_op*]

def expression_op
	['|' term]
|	['&' term]
|	['-' term]
|	['--' term]

def term [factor_label term_op_list_short]

# This list is done manually to get shortest match.
def term_op_list_short
	[]
|	[term_op term_op_list_short]

def term_op
	[factor_label]
|	['.' factor_label]
|	[':>' factor_label]
|	[':>>' factor_label]
|	['<:' factor_label]

def factor_label
	[factor_ep]
|	[word ':' factor_ep]

def factor_ep
	[factor_aug]
|	[factor_aug '->' word]

def aug_base
	['@'] |	['>'] |	['%'] | ['$']

def aug_op
	['@'] |	['>'] |	['%'] | ['$']
|	['>' 'from']
|	['>' 'to']

def action_ref 
	[word]
|	['{' host::tok* '}']

def priority_aug
	[uint]
|	['+' uint]
|	['-' uint]

def aug_cond
	['>?'] | ['$?'] | ['%?']
|	['>' 'when'] | ['$' 'when'] | ['%' 'when']
|	['when'] | ['inwhen'] | ['outwhen']

def aug_to_state
	['>~'] | ['<~'] | ['$~'] | ['%~'] | ['@~']
|	['>' 'to'] | ['<' 'to'] | ['$' 'to'] | ['%' 'to'] | ['@' 'to']
|	['<>~'] | ['<>' 'to']

def aug_from_state
	['>*'] | ['<*'] | ['$*'] | ['%*'] | ['@*']
|	['>' 'from'] | ['<' 'from'] | ['$' 'from'] | ['%' 'from'] | ['@' 'from']
|	['<>*'] | ['<>' 'to']

def aug_eof
	['>/'] | ['</'] | ['$/'] | ['%/'] | ['@/']
|	['>' 'eof'] | ['<' 'eof'] | ['$' 'eof'] | ['%' 'eof'] | ['@' 'eof']
|	['<>/'] | ['<>' 'to']

def aug_gbl_error
	['>!'] | ['<!'] | ['$!'] | ['%!'] | ['@!']
|	['>' 'err'] | ['<' 'err'] | ['$' 'err'] | ['%' 'err'] | ['@' 'err']
|	['<>!'] | ['<>' 'to']

def aug_local_error
	['>^'] | ['<^'] | ['$^'] | ['%^'] | ['@^']
|	['>' 'lerr'] | ['<' 'lerr'] | ['$' 'lerr'] | ['%' 'lerr'] | ['@' 'lerr']
|	['<>^'] | ['<>' 'to']

def factor_aug
	[factor_aug aug_base action_ref]
|	[factor_aug aug_base priority_aug]
|	[factor_aug aug_base '(' word ',' priority_aug ')']
|	[factor_aug aug_cond action_ref]
|	[factor_aug aug_cond '!' action_ref]
|	[factor_aug aug_to_state action_ref]
|	[factor_aug aug_from_state action_ref]
|	[factor_aug aug_eof action_ref]
|	[factor_aug aug_gbl_error action_ref]
|	[factor_aug aug_local_error action_ref]
|	[factor_aug aug_local_error '(' word ',' action_ref ')']
|	[factor_rep]

def factor_rep 
	[factor_neg factor_rep_op*]

def factor_rep_op
	['*']
|	['**']
|	['?']
|	['+']
|	['{' factor_rep_num '}']
|	['{' ',' factor_rep_num '}']
|	['{' factor_rep_num ',' '}']
|	['{' factor_rep_num ',' factor_rep_num '}']

def factor_rep_num
	[uint]

def factor_neg 
	['!' factor_neg]
|	['^' factor_neg]
|	[factor]

def factor 
	[alphabet_num]
|	[word]
|	[string]
|	[union]
|	[range_lit '..' range_lit]
|	['(' join ')']

def range_lit
	[string]
|	[alphabet_num]

def alphabet_num 
	[uint]
|	['-' uint]

def lm_act
	['=>' action_ref]

def lm_stmt
	[join lm_act? ';'] commit
|	[word '=' join ';'] commit

def lm
	[join]
|	['|*' lm_stmt+ '*|']

def statement
	[word '=' join ';'] commit
|	[word ':=' lm ';'] commit
|	['machine' word ';'] commit
|	['action' word '{' host::tok+ '}'] commit

def ragel_start 
	[statement*]

end ragel

namespace host

lex 
	literal '%%', '%%{', '}%%'

	token comment /'/*' any* :>> '*/'/
	token ws /[ \t\n]+/

	token string /
		'"' ( [^"\\] | '\\' any )* '"' |
		"'" ( [^'\\] | '\\' any )* "'"
	/

	token sym /
		';' | '=' | '-' | '+' | '*' | '/' |
		'<' | '>' | '(' | ')' | '{' | '}' |
		'[' | ']'
	/

	token word /[a-zA-Z_][a-zA-Z0-9_]*/
	token number /[0-9]+/
end

def tok
	[word]
|	[number]
|	[comment]
|	[string]
|	[sym]
|	[ws]

def section
	['%%' tok+ '%%{' ragel::ragel_start '}%%']
|	[tok+]

end host

def start
	[host::section*]

parse Start: start[ stdin ]

if Start.tree
	print( Start.tree '\n' )
else
	print( Start.error '\n' )
